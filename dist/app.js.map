{"version":3,"sources":["../src/app.ts","../src/di.ts"],"sourcesContent":["// app.ts\nimport 'reflect-metadata';\nimport { Injectable, Module, Control, AtomFactory } from './di';\n\n@Injectable\nclass CatsService {\n    meow() {\n        return 'Meow!';\n    }\n}\n\n@Control('cat')\nclass CatsController {\n    constructor(private catsService: CatsService) { }\n\n    greet() {\n        return this.catsService.meow();\n    }\n}\n\n@Module({\n    providers: [CatsService],\n    controllers: [CatsController]\n})\nclass AppModule { }\n\nasync function main() {\n    const app = await AtomFactory.create(AppModule, {\n        debug: true\n    });\n    console.log(app.cat.greet()); // 输出: Meow!\n}\n\nmain();\n","import 'reflect-metadata';\n\ntype Constructor<T = any> = new (...args: any[]) => T;\n\nconst DIContainer = new Map<Constructor, any>();\n\nfunction Injectable<T>(constructor: Constructor<T>): Constructor<T> {\n    Reflect.defineMetadata('design:paramtypes', Reflect.getMetadata('design:paramtypes', constructor) || [], constructor);\n    const paramTypes: Constructor[] = Reflect.getMetadata('design:paramtypes', constructor);\n    const instance = new constructor(...paramTypes.map(type => DIContainer.get(type)));\n    DIContainer.set(constructor, instance);\n    return constructor;\n}\n\nfunction Module(options: { providers: Constructor[], controllers: Constructor[] }) {\n    return function <T extends Constructor>(constructor: T): T {\n        Reflect.defineMetadata('module:providers', options.providers, constructor);\n        Reflect.defineMetadata('module:controllers', options.controllers, constructor);\n        return constructor;\n    };\n}\n\n\nfunction Control(name: string) {\n    return function (constructor: Constructor) {\n        Reflect.defineMetadata('control:name', name, constructor);\n        Injectable(constructor);  // 确保控制器也是可注入的\n    };\n}\n\n\nfunction get<T>(constructor: Constructor<T>): T {\n    if (!DIContainer.has(constructor)) {\n        throw new Error(`No instance found for ${constructor.name}`);\n    }\n    return DIContainer.get(constructor);\n}\n\nclass AtomFactory {\n    static async create<T>(module: Constructor<T>, options: any): Promise<T> {\n        const moduleInstance = new module();\n        DIContainer.set(module, moduleInstance);\n\n        // 实例化 providers\n        const providersMetadata = Reflect.getMetadata('module:providers', module) || [];\n        providersMetadata.forEach(provider => {\n            if (!DIContainer.has(provider)) {\n                Injectable(provider);\n            }\n        });\n\n        // 实例化并注册 controllers\n        const controllersMetadata = Reflect.getMetadata('module:controllers', module) || [];\n        controllersMetadata.forEach(controller => {\n            if (!DIContainer.has(controller)) {\n                Injectable(controller);\n            }\n            const name = Reflect.getMetadata('control:name', controller);\n            if (name) {\n                moduleInstance[name] = DIContainer.get(controller);\n            }\n        });\n\n        return moduleInstance;\n    }\n}\n\n\nexport { Injectable, Module, get, Control, AtomFactory };"],"mappings":";;;;;;;AACA,IAAAA,2BAAO;;;ACDP,8BAAO;AAIP,IAAMC,cAAc,oBAAIC,IAAAA;AAExB,SAASC,WAAcC,aAA2B;AAC9CC,UAAQC,eAAe,qBAAqBD,QAAQE,YAAY,qBAAqBH,WAAAA,KAAgB,CAAA,GAAIA,WAAAA;AACzG,QAAMI,aAA4BH,QAAQE,YAAY,qBAAqBH,WAAAA;AAC3E,QAAMK,WAAW,IAAIL,YAAAA,GAAeI,WAAWE,IAAIC,CAAAA,SAAQV,YAAYW,IAAID,IAAAA,CAAAA,CAAAA;AAC3EV,cAAYY,IAAIT,aAAaK,QAAAA;AAC7B,SAAOL;AACX;AANSD;AAQT,SAASW,OAAOC,SAAiE;AAC7E,SAAO,SAAiCX,aAAc;AAClDC,YAAQC,eAAe,oBAAoBS,QAAQC,WAAWZ,WAAAA;AAC9DC,YAAQC,eAAe,sBAAsBS,QAAQE,aAAab,WAAAA;AAClE,WAAOA;EACX;AACJ;AANSU;AAST,SAASI,QAAQC,MAAY;AACzB,SAAO,SAAUf,aAAwB;AACrCC,YAAQC,eAAe,gBAAgBa,MAAMf,WAAAA;AAC7CD,eAAWC,WAAAA;EACf;AACJ;AALSc;AAvBT;AAsCA,IAAME,eAAN,WAAMA;EACF,aAAaC,OAAUC,SAAwBC,SAA0B;AACrE,UAAMC,iBAAiB,IAAIF,QAAAA;AAC3BG,gBAAYC,IAAIJ,SAAQE,cAAAA;AAGxB,UAAMG,oBAAoBC,QAAQC,YAAY,oBAAoBP,OAAAA,KAAW,CAAA;AAC7EK,sBAAkBG,QAAQC,CAAAA,aAAAA;AACtB,UAAI,CAACN,YAAYO,IAAID,QAAAA,GAAW;AAC5BE,mBAAWF,QAAAA;MACf;IACJ,CAAA;AAGA,UAAMG,sBAAsBN,QAAQC,YAAY,sBAAsBP,OAAAA,KAAW,CAAA;AACjFY,wBAAoBJ,QAAQK,CAAAA,eAAAA;AACxB,UAAI,CAACV,YAAYO,IAAIG,UAAAA,GAAa;AAC9BF,mBAAWE,UAAAA;MACf;AACA,YAAMC,OAAOR,QAAQC,YAAY,gBAAgBM,UAAAA;AACjD,UAAIC,MAAM;AACNZ,uBAAeY,IAAAA,IAAQX,YAAYY,IAAIF,UAAAA;MAC3C;IACJ,CAAA;AAEA,WAAOX;EACX;AACJ,GA3BMJ,2BAAN;;;;;;;;;;;;;;ADtCA,IAAAkB;AAIA,IACMC,eADND,MAAA,MACMC;EACFC,OAAO;AACH,WAAO;EACX;AACJ,GAJMD,OAAAA,KAAAA,gBADND;AACMC,cAAAA,aAAAA;EADLE;GACKF,WAAAA;AALN,IAAAD;AAWA,IACMI,kBADNJ,MAAA,MACMI;EACFC,YAAoBC,aAA0B;;SAA1BA,cAAAA;EAA4B;EAEhDC,QAAQ;AACJ,WAAO,KAAKD,YAAYJ,KAAI;EAChC;AACJ,GANME,OAAAA,KAAAA,mBADNJ;AACMI,iBAAAA,aAAAA;EADLI,QAAQ,KAAA;;;WAE4B,gBAAA,cAAA,SAAA;;GAD/BJ,cAAAA;AAZN,IAAAJ;AAoBA,IAIMS,aAJNT,MAAA,MAIMS;AAAY,GAAZA,OAAAA,KAAAA,cAJNT;AAIMS,YAAAA,aAAAA;EAJLC,OAAO;IACJC,WAAW;MAACV;;IACZW,aAAa;MAACR;;EAClB,CAAA;GACMK,SAAAA;AAEN,eAAeI,OAAAA;AACX,QAAMC,MAAM,MAAMC,YAAYC,OAAOP,WAAW;IAC5CQ,OAAO;EACX,CAAA;AACAC,UAAQC,IAAIL,IAAIM,IAAIb,MAAK,CAAA;AAC7B;AALeM;AAOfA,KAAAA;","names":["import_reflect_metadata","DIContainer","Map","Injectable","constructor","Reflect","defineMetadata","getMetadata","paramTypes","instance","map","type","get","set","Module","options","providers","controllers","Control","name","AtomFactory","create","module","options","moduleInstance","DIContainer","set","providersMetadata","Reflect","getMetadata","forEach","provider","has","Injectable","controllersMetadata","controller","name","get","_a","CatsService","meow","Injectable","CatsController","constructor","catsService","greet","Control","AppModule","Module","providers","controllers","main","app","AtomFactory","create","debug","console","log","cat"]}